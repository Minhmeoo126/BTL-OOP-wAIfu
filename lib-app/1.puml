@startuml
package "com.example.libapp" {
  package "model" {
    class User {
      -id: int
      -username: String
      -password: String
      -role: String
      -email: String
      -fullName: String
      +getId(): int
      +setId(id: int)
      +getUsername(): String
      +setUsername(username: String)
      +getPassword(): String
      +setPassword(password: String)
      +getRole(): String
      +setRole(role: String)
      +getEmail(): String
      +setEmail(email: String)
      +getFullName(): String
      +setFullName(fullName: String)
    }

    class Book {
      -id: int
      -title: String
      -authorId: int
      -authorName: String
      -categoryId: int
      -categoryName: String
      -totalCopies: int
      -availableCopies: int
      +getId(): int
      +setId(id: int)
      +getTitle(): String
      +setTitle(title: String)
      +getAuthorId(): int
      +setAuthorId(authorId: int)
      +getAuthorName(): String
      +setAuthorName(authorName: String)
      +getCategoryId(): int
      +setCategoryId(categoryId: int)
      +getCategoryName(): String
      +setCategoryName(categoryName: String)
      +getTotalCopies(): int
      +setTotalCopies(totalCopies: int)
      +getAvailableCopies(): int
      +setAvailableCopies(availableCopies: int)
    }

    class Author {
      -id: int
      -name: String
      -bio: String
      +getId(): int
      +setId(id: int)
      +getName(): String
      +setName(name: String)
      +getBio(): String
      +setBio(bio: String)
    }

    class Category {
      -id: int
      -name: String
      +getId(): int
      +setId(id: int)
      +getName(): String
      +setName(name: String)
    }

    class BorrowingRecord {
      -id: int
      -userId: int
      -bookId: int
      -borrowDate: String
      -returnDate: String
      +getId(): int
      +setId(id: int)
      +getUserId(): int
      +setUserId(userId: int)
      +getBookId(): int
      +setBookId(bookId: int)
      +getBorrowDate(): String
      +setBorrowDate(borrowDate: String)
      +getReturnDate(): String
      +setReturnDate(returnDate: String)
    }

    class Review {
      -id: int
      -userId: int
      -bookId: int
      -rating: int
      -comment: String
      -reviewDate: String
      +getId(): int
      +setId(id: int)
      +getUserId(): int
      +setUserId(userId: int)
      +getBookId(): int
      +setBookId(bookId: int)
      +getRating(): int
      +setRating(rating: int)
      +getComment(): String
      +setComment(comment: String)
      +getReviewDate(): String
      +setReviewDate(reviewDate: String)
    }

    class Fine {
      -id: int
      -userId: int
      -borrowingRecordId: int
      -amount: double
      -status: String
      +getId(): int
      +setId(id: int)
      +getUserId(): int
      +setUserId(userId: int)
      +getBorrowingRecordId(): int
      +setBorrowingRecordId(borrowingRecordId: int)
      +getAmount(): double
      +setAmount(amount: double)
      +getStatus(): String
      +setStatus(status: String)
    }

    Book --> Author : references
    Book --> Category : references
    BorrowingRecord --> User : references
    BorrowingRecord --> Book : references
    Review --> User : references
    Review --> Book : references
    Fine --> User : references
    Fine --> BorrowingRecord : references
  }

  package "persistence" {
    class DatabaseConnection {
      -DB_DIR: String = "lib-app"
      -URL: String = "jdbc:sqlite:lib-app/lib.db"
      +connect(): Connection
      -initializeDatabase(conn: Connection)
      -runSQLScript(conn: Connection, resourcePath: String)
    }

    class UserDAO {
      +isUsernameTaken(username: String): boolean
      +isEmailTaken(email: String): boolean
      +addUser(user: User)
      +getAllUsers(): List<User>
    }

    class BookDAO {
      +addBook(book: Book)
      +getAllBooks(): List<Book>
    }

    class AuthorDAO {
      +addAuthor(author: Author)
      +getAllAuthors(): List<Author>
    }

    class CategoryDAO {
      +addCategory(category: Category)
      +getAllCategories(): List<Category>
    }

    class BorrowingRecordDAO {
      +addBorrowingRecord(record: BorrowingRecord)
      +getAllBorrowingRecords(): List<BorrowingRecord>
    }

    class ReviewDAO {
      +addReview(review: Review)
      +getAllReviews(): List<Review>
    }

    class FineDAO {
      +addFine(fine: Fine)
      +getFinesByUser(userId: int): List<Fine>
      +updateFineStatus(fineId: int, status: String)
    }

    UserDAO --> DatabaseConnection : uses
    BookDAO --> DatabaseConnection : uses
    AuthorDAO --> DatabaseConnection : uses
    CategoryDAO --> DatabaseConnection : uses
    BorrowingRecordDAO --> DatabaseConnection : uses
    ReviewDAO --> DatabaseConnection : uses
    FineDAO --> DatabaseConnection : uses

    UserDAO --> User : manages
    BookDAO --> Book : manages
    AuthorDAO --> Author : manages
    CategoryDAO --> Category : manages
    BorrowingRecordDAO --> BorrowingRecord : manages
    ReviewDAO --> Review : manages
    FineDAO --> Fine : manages
  }

  package "viewmodel" {
    class LoginViewModel {
      -userDAO: UserDAO
      -message: StringProperty
      +messageProperty(): StringProperty
      +login(username: String, password: String, role: String): User
    }

    class MainViewModel {
      +openBookView()
      +openSearchBook()
      +openMyAccount()
      +openBorrowingHistory()
      +openBorrowBook()
      +openReturnBook()
      +logout()
    }

    class BookViewModel {
      -bookDAO: BookDAO
      -books: ObservableList<Book>
      +getBooks(): ObservableList<Book>
      +loadBooks()
    }

    class BorrowBookViewModel {
      -borrowingRecordDAO: BorrowingRecordDAO
      -message: StringProperty
      -loggedInUser: User
      +messageProperty(): StringProperty
      +setLoggedInUser(user: User)
      +borrowBook(bookIdText: String)
    }

    class BorrowingHistoryViewModel {
      -borrowingRecordDAO: BorrowingRecordDAO
      -records: ObservableList<BorrowingRecord>
      -loggedInUser: User
      +getRecords(): ObservableList<BorrowingRecord>
      +setLoggedInUser(user: User)
      +loadHistory()
    }

    class MyAccountViewModel {
      -username: StringProperty
      -email: StringProperty
      -fullName: StringProperty
      -role: StringProperty
      +usernameProperty(): StringProperty
      +emailProperty(): StringProperty
      +fullNameProperty(): StringProperty
      +roleProperty(): StringProperty
      +loadUserInfo(user: User)
    }

    class ReturnBookViewModel {
      -borrowingRecordDAO: BorrowingRecordDAO
      -message: StringProperty
      -loggedInUser: User
      +messageProperty(): StringProperty
      +setLoggedInUser(user: User)
      +returnBook(recordIdText: String)
    }

    class SearchBookViewModel {
      -bookDAO: BookDAO
      -books: ObservableList<Book>
      +getBooks(): ObservableList<Book>
      +loadBooks()
      +searchBooks(query: String)
    }

    class UserViewModel {
      -userDAO: UserDAO
      -message: StringProperty
      +messageProperty(): StringProperty
      +addUser(username: String, password: String, role: String, email: String, fullName: String)
    }

    class ReviewViewModel {
      -reviewDAO: ReviewDAO
      -reviews: ObservableList<Review>
      +getReviewsByBook(bookId: int): ObservableList<Review>
      +addReview(review: Review)
    }

    class FineViewModel {
      -fineDAO: FineDAO
      -fines: ObservableList<Fine>
      +getFines(userId: int): ObservableList<Fine>
      +payFine(fineId: int)
    }

    LoginViewModel --> UserDAO : uses
    BookViewModel --> BookDAO : uses
    BorrowBookViewModel --> BorrowingRecordDAO : uses
    BorrowingHistoryViewModel --> BorrowingRecordDAO : uses
    ReturnBookViewModel --> BorrowingRecordDAO : uses
    SearchBookViewModel --> BookDAO : uses
    UserViewModel --> UserDAO : uses
    ReviewViewModel --> ReviewDAO : uses
    FineViewModel --> FineDAO : uses
  }

  package "controllers" {
    class LoginController {
      -username: TextField
      -password: PasswordField
      -loginlabel: Label
      -userloginlabel: Label
      -tabPaneLogin: TabPane
      -tabAdmin: Tab
      -tabUser: Tab
      -lblAdmin: Label
      -lblUser: Label
      -lblStatus: Label
      -slidingPane: Pane
      +initialize()
      +openAdminTab(event: MouseEvent)
      +openUserTab(event: MouseEvent)
      +adminlogin(event: ActionEvent)
      +userlogin(event: ActionEvent)
      +GoToRegister(event: ActionEvent)
    }

    class MainController {
      +openBookView()
      +openSearchBook()
      +openMyAccount()
      +openBorrowingHistory()
      +openBorrowBook()
      +openReturnBook()
      +handleLogout()
      -loadView(fxmlFile: String, title: String)
    }

    class BookViewController {
      -bookTable: TableView<Book>
      -titleColumn: TableColumn<Book, String>
      -authorColumn: TableColumn<Book, String>
      -categoryColumn: TableColumn<Book, String>
      -totalCopiesColumn: TableColumn<Book, Integer>
      -availableCopiesColumn: TableColumn<Book, Integer>
      +initialize()
      +backToMain()
    }

    class BorrowBookController {
      -bookIdField: TextField
      -messageLabel: Label
      +initialize()
      +handleBorrow()
      +backToMain()
    }

    class BorrowingHistoryController {
      -historyTable: TableView<BorrowingRecord>
      -bookIdColumn: TableColumn<BorrowingRecord, Integer>
      -borrowDateColumn: TableColumn<BorrowingRecord, String>
      -returnDateColumn: TableColumn<BorrowingRecord, String>
      +initialize()
      +backToMain()
    }

    class MyAccountController {
      -usernameLabel: Label
      -emailLabel: Label
      -fullNameLabel: Label
      -roleLabel: Label
      +initialize()
      +backToMain()
    }

    class RegisterController {
      -CreateAccount: Button
      -addUserPassword: PasswordField
      -addUserName: TextField
      -emailField: TextField
      -fullNameField: TextField
      -AdminSelected: CheckBox
      -UserSelected: CheckBox
      -information: Label
      +initialize()
      +GoToLogin()
      +Register(event: ActionEvent)
    }

    class ReturnBookController {
      -recordIdField: TextField
      -messageLabel: Label
      +initialize()
      +handleReturn()
      +backToMain()
    }

    class SearchBookController {
      -searchField: TextField
      -bookTable: TableView<Book>
      -titleColumn: TableColumn<Book, String>
      -authorColumn: TableColumn<Book, String>
      -categoryColumn: TableColumn<Book, String>
      -totalCopiesColumn: TableColumn<Book, Integer>
      -availableCopiesColumn: TableColumn<Book, Integer>
      +initialize()
      +handleSearch()
      +backToMain()
    }

    class UserController {
      -usernameField: TextField
      -emailField: TextField
      -fullNameField: TextField
      -messageLabel: Label
      +initialize()
      +handleAddUser()
      +backToMain()
    }

    class ReviewController {
      -bookIdField: TextField
      -ratingField: TextField
      -commentField: TextArea
      -messageLabel: Label
      +initialize()
      +submitReview()
      +backToMain()
    }

    class FineController {
      -fineTable: TableView<Fine>
      -userIdColumn: TableColumn<Fine, Integer>
      -borrowingRecordIdColumn: TableColumn<Fine, Integer>
      -amountColumn: TableColumn<Fine, Double>
      -statusColumn: TableColumn<Fine, String>
      +initialize()
      +payFine()
      +backToMain()
    }

    LoginController --> LoginViewModel : uses
    MainController --> MainViewModel : uses
    BookViewController --> BookViewModel : uses
    BorrowBookController --> BorrowBookViewModel : uses
    BorrowingHistoryController --> BorrowingHistoryViewModel : uses
    MyAccountController --> MyAccountViewModel : uses
    RegisterController --> UserViewModel : uses
    ReturnBookController --> ReturnBookViewModel : uses
    SearchBookController --> SearchBookViewModel : uses
    UserController --> UserViewModel : uses
    ReviewController --> ReviewViewModel : uses
    FineController --> FineViewModel : uses

    LoginController --> MainController : navigates to
    LoginController --> RegisterController : navigates to
    RegisterController --> LoginController : navigates to
    MainController --> BookViewController : navigates to
    MainController --> SearchBookController : navigates to
    MainController --> MyAccountController : navigates to
    MainController --> BorrowingHistoryController : navigates to
    MainController --> BorrowBookController : navigates to
    MainController --> ReturnBookController : navigates to
    MainController --> LoginController : navigates to
    BookViewController --> MainController : navigates to
    BorrowBookController --> MainController : navigates to
    BorrowingHistoryController --> MainController : navigates to
    MyAccountController --> MainController : navigates to
    ReturnBookController --> MainController : navigates to
    SearchBookController --> MainController : navigates to
    UserController --> MainController : navigates to
    ReviewController --> MainController : navigates to
    FineController --> MainController : navigates to
  }

  class Main {
    +start(stage: Stage)
    +main(args: String[])
  }

  class DatabaseSetup {
    +main(args: String[])
  }

  class SessionManager {
    -instance: SessionManager
    -loggedInUser: User
    +getInstance(): SessionManager
    +setLoggedInUser(user: User)
    +getLoggedInUser(): User
    +clearSession()
  }

  Main --> LoginController : loads
  DatabaseSetup --> DatabaseConnection : uses
  SessionManager --> User : manages
}

@enduml